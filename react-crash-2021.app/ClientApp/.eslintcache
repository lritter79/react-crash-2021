[{"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\TaskDetails.js":"1","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Footer.js":"2","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\index.js":"3","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\About.js":"4","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\RegisterAndLoginRoutes.js":"5","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserManager.js":"6","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\Logout.js":"7","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\toast\\Toast.js":"8","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Constant.js":"9","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserContext.js":"10","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\App.js":"11"},{"size":4126,"mtime":1616002415407,"results":"12","hashOfConfig":"13"},{"size":977,"mtime":1616002601993,"results":"14","hashOfConfig":"13"},{"size":876,"mtime":1616002415450,"results":"15","hashOfConfig":"13"},{"size":280,"mtime":1614736916063,"results":"16","hashOfConfig":"13"},{"size":699,"mtime":1616002415575,"results":"17","hashOfConfig":"13"},{"size":7393,"mtime":1616002415420,"results":"18","hashOfConfig":"13"},{"size":198,"mtime":1614736916166,"results":"19","hashOfConfig":"13"},{"size":2936,"mtime":1616002415445,"results":"20","hashOfConfig":"13"},{"size":232,"mtime":1614736916073,"results":"21","hashOfConfig":"13"},{"size":1968,"mtime":1616002415415,"results":"22","hashOfConfig":"13"},{"size":7493,"mtime":1616003435572,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"ea2nox",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\TaskDetails.js",["51","52","53","54","55"],"import { useParams } from 'react-router-dom'\r\nimport { useState, useEffect, useContext } from 'react'\r\nimport Button from './Button'\r\nimport EditTask from './EditTask'\r\nimport FormatDateString from './FormatDateString'\r\nimport FetchTask from './task-crud-operations/FetchTask'\r\nimport UpdateTask from './task-crud-operations/UpdateTask'\r\nimport CommentSection from './comment-components/CommentSection'\r\nimport { useShowToast } from './toast/ToastContext'\r\nimport { useToken, useUserId } from './api-authorization/UserContext'\r\n\r\nconst TaskDetails = () => {\r\n\r\n    //gets the params passed in from the router\r\n    //is a react hook\r\n    const { id } = useParams()\r\n    const { token, setToken } = useToken()\r\n    const { userId, setUserId } = useUserId()\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [task, setTask] = useState(null)\r\n    const [showEditTask, setShowEditTask] = useState(false)\r\n    const [comments, setComments] = useState()\r\n    const showToast = useShowToast() \r\n\r\n    useEffect(() => {\r\n        //console.log(\"using effect: task details\")\r\n        // Fetch Task\r\n        const fetchTask = FetchTask\r\n\r\n        const getTask = async () => {          \r\n            try {       \r\n                const taskFromServer = await fetchTask(id, token)         \r\n                setTask(taskFromServer)\r\n                //console.log(taskFromServer)\r\n                setComments(taskFromServer.comments)\r\n                setIsLoading(false)\r\n            } catch (error) {\r\n                console.log(\"failed\") \r\n                console.log(error);\r\n            }   \r\n        }\r\n      \r\n        getTask()\r\n\r\n    }, []) \r\n\r\n    const onCancel = () => {\r\n        setShowEditTask(!showEditTask)\r\n    }\r\n\r\n    const update = async (task) => {\r\n        setIsLoading(true)\r\n        try {\r\n            task.userId = userId\r\n            setShowEditTask(!showEditTask)\r\n            const updTask = await UpdateTask(task, token)\r\n            setTask(updTask)\r\n            setIsLoading(false)\r\n            showToast('success', `Updated \"${task.text}\"`)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!isLoading ? (\r\n                <div>    \r\n                    {!showEditTask && (\r\n                        <div className=\"taskDetail\">\r\n                            <h3>\r\n                                {task.text}\r\n                            </h3>\r\n                            <hr></hr>\r\n                            <p>\r\n                                Category: {task.category}\r\n                            </p>\r\n                            <p>\r\n                                Location: {task.location}\r\n                            </p>\r\n                            <p>\r\n                                Day: {FormatDateString(task.day)}\r\n                            </p>\r\n                            <p>\r\n                                Details: {task.details !== undefined ? task.details : \"None\"}\r\n                            </p>    \r\n                            { task.isCompleted && (\r\n                                <p>Completed On: {FormatDateString(task.dateCompleted)}</p>\r\n                            )}\r\n                            <Button\r\n                                color='green'\r\n                                text='Edit Task'\r\n                                onClick={() => setShowEditTask(!showEditTask)}\r\n                            />\r\n                            {(comments != undefined) && (\r\n                                <CommentSection comments={comments} taskId={id} /> \r\n                            )}                         \r\n                        </div>\r\n                    )}                               \r\n\r\n                    {showEditTask && (\r\n                        <EditTask task={task} onUpdate={update} onCancel={onCancel} token={token}/>\r\n                    )}        \r\n                </div>) : (\r\n                <div>\r\n                    <h1>Loading ...</h1>\r\n                </div>\r\n            )}           \r\n        </>        \r\n    )\r\n}\r\n\r\nexport default TaskDetails",["56","57"],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Footer.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\index.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\About.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\RegisterAndLoginRoutes.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserManager.js",["58","59","60","61","62","63"],"import { useState, useEffect } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Constant from '../Constant'\r\nimport userFunctions from './UserFunctions'\r\nimport { useShowToast } from '../toast/ToastContext'\r\nimport { useToken, useUserId }  from './UserContext'\r\n\r\nconst UserManager = ({ handleLogout }) => {\r\n    //console.log(`id: ${id}`)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [user, setUser] = useState('')\r\n    const [showDeleteForm, setShowDeleteForm] = useState(false)\r\n    const [deleteDisabled, setDeleteDisabled] = useState(false)\r\n    const [submitDisabled, setSubmitDisabled] = useState(false)\r\n    const onSave = useShowToast()\r\n    const { token, setToken } = useToken()\r\n    const { userId, setUserId } = useUserId()\r\n    //https://stackoverflow.com/questions/53120972/how-to-call-loading-function-with-react-useeffect-only-once\r\n    useEffect(() => {\r\n\r\n        const getUser = async () => {\r\n            try {\r\n                //console.log(CrudOperations)                               \r\n                //console.log(`token = ${token}`)\r\n                //console.log(`user = ${userId}`)\r\n                if (userId != undefined) {\r\n                    const userData = await userFunctions.getUser(userId, token)\r\n                    setUser(userData)\r\n                    setIsLoading(false)\r\n                }\r\n\r\n            } catch (error) {\r\n                onSave('error', error)\r\n            }\r\n        }\r\n\r\n        getUser()\r\n        \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        return function cleanup() {\r\n            //console.log('clean up')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //console.log('user use effect')\r\n        //if (isChecked != undefined) {\r\n        //    //const updatedUser = await userFunctions.saveUser({ user, id, token })        \r\n        //}\r\n        //else {\r\n        //    console.log('first time')\r\n        //}\r\n        //console.log('set')\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        console.log('isLoading use effect')\r\n    }, [isLoading])\r\n\r\n    \r\n\r\n\r\n    async function updateUser(appUser) {\r\n        \r\n        return fetch(`${Constant()}/api/users/${userId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(appUser),\r\n        })\r\n            .then(function (data) {\r\n               onSave('success', 'Your changes have been saved')\r\n               return data.json()\r\n            })\r\n            .catch((error) => {\r\n               onSave('error', error)\r\n            })\r\n    }\r\n\r\n    const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    const onSubmit = async e => {\r\n        e.preventDefault()\r\n        setSubmitDisabled(true)\r\n        let res = await updateUser(user)  \r\n        await sleep(1000)\r\n        setSubmitDisabled(false)\r\n    }\r\n\r\n    const onSubmitDelete = async e => {\r\n        e.preventDefault()\r\n        setDeleteDisabled(true)\r\n        setShowDeleteForm(true)\r\n        //handleLogout(e)\r\n        //let res = await deleteAccount(id)\r\n    }\r\n\r\n    const onDelete = async e => {\r\n        e.preventDefault()\r\n        handleLogout(e)\r\n        let res = await deleteAccount(userId)\r\n    }\r\n\r\n    async function deleteAccount(id) {\r\n        return fetch(`${Constant()}/api/users/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({userId: id}),\r\n        })\r\n        .then(data => data.json())\r\n        .catch((error) => {\r\n            console.error('Fetch Error:', error);\r\n        });\r\n    }  \r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <p>Loading...</p>\r\n            ):\r\n                (<div>\r\n                    {showDeleteForm && (\r\n                        <div className='popup'>\r\n                            <div className='popupForm'>\r\n                                <form>\r\n                                    <label for=\"\">Are you sure?</label>\r\n                                    <br />\r\n                                    <button\r\n                                        className='btn'\r\n                                        style={{ backgroundColor: 'green' }}\r\n                                        onClick={onDelete}\r\n                                    >\r\n                                        Yes\r\n                                    </button>\r\n                                    <button\r\n                                        type='submit'\r\n                                        className='btn'\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={function () {\r\n                                            setDeleteDisabled(false)\r\n                                            setShowDeleteForm(false)\r\n                                        }}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n\r\n                                </form>\r\n                            </div>                          \r\n                        </div>\r\n                    )}\r\n                    <Form onSubmit={onSubmit}>\r\n                        <Form.Group>\r\n                            <Form.Check\r\n                                type=\"checkbox\"\r\n                                label=\"Open To Collaboration?: \"\r\n                                checked={user.isOpenToCollaboration}\r\n                                onChange={(e) => setUser({ ...user, isOpenToCollaboration: e.currentTarget.checked })} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>\r\n                                Bio: \r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows={3}\r\n                                placeholder=''\r\n                                value={user.bio}\r\n                                onChange={(e) => setUser({ ...user, bio: e.target.value })}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <button\r\n                            type='submit'\r\n                            className='btn btn-block'\r\n                            style={{ backgroundColor: 'green' }}\r\n                            disabled={submitDisabled}\r\n                        >\r\n                            Save Changes\r\n                        </button>\r\n                    </Form>\r\n\r\n                    <form onSubmit={onSubmitDelete}>\r\n                        <button\r\n                            type='submit'\r\n                            className='btn'\r\n                            style={{ backgroundColor: 'red' }}\r\n                            disabled={deleteDisabled}\r\n                        >\r\n                            Delete Account\r\n                        </button>\r\n                    </form >                 \r\n                    \r\n                </div>)}\r\n            \r\n        </>\r\n   )\r\n}\r\n\r\nexport default UserManager","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\Logout.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\toast\\Toast.js",["64"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useToast } from './ToastContext'\r\n\r\nimport './Toast.css';\r\n//source:     transition: max-height 0.5s, opacity 0.5s;\r\nconst Toast = ({ position, autoDelete, dismissTime }) => {\r\n    const toastList = useToast()\r\n    const [list, setList] = useState(toastList)\r\n\r\n    //function sleep(ms) {\r\n    //    console.log('sleeping')\r\n    //    return new Promise(resolve => setTimeout(resolve, ms));\r\n    //  }\r\n\r\n    useEffect(() => {\r\n        //console.log('toastlist side effect')\r\n        //console.log(toastList)\r\n        setList([...toastList]);\r\n\r\n        // eslint-disable-next-line\r\n    }, [toastList]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(async () => {\r\n            if (autoDelete && toastList.length && list.length) {            \r\n                deleteToast(toastList[0].id);\r\n            }\r\n        }, dismissTime);\r\n\r\n        return async () => {                     \r\n            clearInterval(interval);\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [toastList, autoDelete, dismissTime, list]);\r\n\r\n    const deleteToast = id => {\r\n        const listItemIndex = list.findIndex(e => e.id === id);\r\n        const toastListItem = toastList.findIndex(e => e.id === id);\r\n        list.splice(listItemIndex, 1);\r\n        toastList.splice(toastListItem, 1);\r\n        setList([...list]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`notification-container ${position}`}>\r\n                {\r\n                    list.map((toast, i) =>\r\n                        <div\r\n                            key={i}\r\n                            className={`notification toast ${('hidden' in toast) ? ('hidden') : ('show')} ${position}`}\r\n                            style={{ backgroundColor: toast.backgroundColor }}\r\n                        >\r\n                            <button onClick={() => deleteToast(toast.id)}>\r\n                                X\r\n                            </button>\r\n                            <div className=\"notification-image\">\r\n                                <img src={toast.icon} alt=\"\" />\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"notification-title\">{toast.title}</p>\r\n                                <p className=\"notification-message\">\r\n                                    {toast.description}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    Toast.defaultProps = {\r\n        position: 'bottom-right'\r\n    }\r\n\r\n    Toast.propTypes = {\r\n        toastList: PropTypes.array.isRequired,\r\n        position: PropTypes.string,\r\n        autoDelete: PropTypes.bool,\r\n        autoDeleteTime: PropTypes.number\r\n    }\r\n}\r\n\r\nexport default Toast\r\n\r\n","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Constant.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserContext.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\App.js",["65","66","67","68"],"import { useState, useEffect } from 'react'\r\nimport { BrowserRouter as Router, Route, NavLink, Redirect } from 'react-router-dom'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\n//for authorization\r\n//import authService from './api-authorization/AuthorizeService'\r\nimport Footer from './components/Footer'\r\nimport Constant from './components/Constant'\r\nimport AlertCenter from './components/AlertCenter'\r\nimport About from './components/About'\r\nimport UserManager from './components/api-authorization/UserManager'\r\nimport RegisterAndLoginRoutes from './components/api-authorization/RegisterAndLoginRoutes'\r\nimport Logout from './components/api-authorization/Logout'\r\nimport Toast from './components/toast/Toast'\r\nimport { ToastProvider, useShowToast } from './components/toast/ToastContext'\r\nimport TaskDetails from './components/TaskDetails'\r\nimport TaskTracker from './components/task-tracker/TaskTracker'\r\nimport { useToken, useUserId } from './components/api-authorization/UserContext'\r\n\r\n//import UpdateTask from './components/UpdateTask'\r\n//function setToken(userToken) {\r\n//    sessionStorage.setItem('token', JSON.stringify(userToken));\r\n\r\n//}\r\n\r\n//function getToken() {\r\n\r\n//    const tokenString = sessionStorage.getItem('token');\r\n//    const userToken = JSON.parse(tokenString);\r\n//    //.? is the optional chain operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\r\n//    /*\r\n//     You need to use the optional chaining operator�?.�when accessing the token property because when you \r\n//     first access the application, the value of sessionStorage.getItem('token') will \r\n//     be undefined. If you try to access a property, you will generate an error.\r\n//     */\r\n//    return userToken?.token\r\n//}\r\n//import header and use it like an xml tag\r\n//keeps tasks at the highest level (state)\r\n//changes the state of tasks\r\n//calls fetch tasks whihc returns a promise\r\n//sets tasks as the state\r\nconst App = () => {\r\n    \r\n    const { userId, setUserId } = useUserId()\r\n    const { token, setToken } = useToken()\r\n    const [alerts, setAlerts] = useState([])\r\n    const [checkValue, setCheckValue] = useState(true)\r\n    const [autoDeleteTime, setAutoDeleteTime] = useState(5000)\r\n\r\n    const showToast = useShowToast()\r\n\r\n    const removeToken = () => {\r\n        localStorage.removeItem('token');\r\n        setToken(null)\r\n        setUserId(null)\r\n    }\r\n\r\n\r\n    function handleLogoutClick(e) {\r\n        e.preventDefault()       \r\n        removeToken()\r\n    }\r\n\r\n    // Fetch Tasks\r\n    //gets the tasks we have on the server with async java\r\n    useEffect(() => {\r\n     \r\n\r\n        const fetchAlerts = async (id) => {\r\n            const res = await fetch(Constant() + `/api/Users/${id}/alerts`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token\r\n                }\r\n            })\r\n\r\n            const data = await res.json()\r\n\r\n            return data\r\n        }\r\n\r\n        const getAlerts = async () => {\r\n            try {\r\n                const tasksFromServer = await fetchAlerts(userId)\r\n                setAlerts(tasksFromServer)\r\n            } catch (error) {\r\n                showToast('error', error)\r\n            }\r\n        }\r\n\r\n        if (userId != undefined) {\r\n            //console.log(userId)\r\n            getAlerts()\r\n        }\r\n   \r\n\r\n    }, [token, userId])\r\n\r\n    //if there are no tasks, it shows  'No Tasks To Show'\r\n    //short ternary in jsx:\r\n    // {x === y ? (<Thing />) : ('String')}\r\n    //wrap everything in <Router> to use routes\r\n    //exact menas match path exactly\r\n    return (\r\n        \r\n        <Router>        \r\n                <ToastProvider>\r\n                    <div id=\"backdrop\">\r\n\r\n                    </div>\r\n                    <Navbar bg=\"light\" expand=\"lg\">\r\n                        <Navbar.Brand>Task Tracker</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n                                <Nav.Link as={NavLink} to=\"/\" exact>Home</Nav.Link>\r\n                                <Nav.Link as={NavLink} to=\"/about\" exact>About</Nav.Link>\r\n                                {token ? (\r\n                                    <>\r\n                                        <Nav.Link as={NavLink} to=\"/userManager\" exact>Manage Account</Nav.Link>\r\n                                        <Nav.Link as={NavLink} to=\"/alerts\" exact>Alerts\r\n                                        {(alerts.length > 0) ? (<span id='alertCounter'>{alerts.length}</span>) : (<></>)}\r\n                                        </Nav.Link>\r\n                                        <Nav.Link as={NavLink} to=\"/logout\" exact onClick={handleLogoutClick}>Logout</Nav.Link>\r\n                                    </>) : (<>\r\n                                        <Nav.Link as={NavLink} to=\"/login\" exact>Login</Nav.Link>\r\n                                        <Nav.Link as={NavLink} to=\"/register\" exact>Register</Nav.Link>\r\n                                    </>)}\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n\r\n                    <div className='container'>\r\n                        <Toast\r\n                            position=\"bottom-right\"\r\n                            autoDelete={checkValue}\r\n                            dismissTime={autoDeleteTime}\r\n                        />\r\n                        <Route path='/about' exact component={About} />\r\n                        <Route path='/logout' exact component={Logout} />\r\n                        {token ? (\r\n                            <>\r\n                                <Route path='/alerts' exact\r\n                                    render={(props) => (\r\n                                        <AlertCenter alerts={alerts} setAlerts={setAlerts} />\r\n                                    )}\r\n                                />\r\n                                <Redirect from='/login' to=\"/\" />\r\n                                <Route path='/userManager' exact\r\n                                    render={(props) => (\r\n                                        <UserManager handleLogout={handleLogoutClick} token={token} id={userId} />\r\n                                    )}\r\n                                />\r\n                                <Route path='/' exact\r\n                                    render={(props) => (\r\n                                        <>\r\n                                            <TaskTracker />\r\n                                        </>\r\n\r\n                                    )} />\r\n\r\n                                <Route path='/task/:id' exact\r\n                                    render={(props) => (\r\n                                        <TaskDetails/>\r\n                                    )}\r\n                                />\r\n                                \r\n                            </>\r\n                        ) : (\r\n                                <>\r\n                                    <RegisterAndLoginRoutes setToken={setToken} token={token} />\r\n                                </>\r\n\r\n                        )}\r\n                        <Footer isLoggedIn={token} />\r\n                    </div>\r\n\r\n                </ToastProvider>\r\n        </Router>\r\n            \r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n",{"ruleId":"69","severity":1,"message":"70","line":2,"column":31,"nodeType":"71","messageId":"72","endLine":2,"endColumn":41},{"ruleId":"69","severity":1,"message":"73","line":17,"column":20,"nodeType":"71","messageId":"72","endLine":17,"endColumn":28},{"ruleId":"69","severity":1,"message":"74","line":18,"column":21,"nodeType":"71","messageId":"72","endLine":18,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":45,"column":8,"nodeType":"77","endLine":45,"endColumn":10,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":95,"column":40,"nodeType":"81","messageId":"82","endLine":95,"endColumn":42},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"69","severity":1,"message":"73","line":16,"column":20,"nodeType":"71","messageId":"72","endLine":16,"endColumn":28},{"ruleId":"69","severity":1,"message":"74","line":17,"column":21,"nodeType":"71","messageId":"72","endLine":17,"endColumn":30},{"ruleId":"79","severity":1,"message":"80","line":26,"column":28,"nodeType":"81","messageId":"82","endLine":26,"endColumn":30},{"ruleId":"75","severity":1,"message":"87","line":39,"column":8,"nodeType":"77","endLine":39,"endColumn":10,"suggestions":"88"},{"ruleId":"69","severity":1,"message":"89","line":91,"column":13,"nodeType":"71","messageId":"72","endLine":91,"endColumn":16},{"ruleId":"69","severity":1,"message":"89","line":107,"column":13,"nodeType":"71","messageId":"72","endLine":107,"endColumn":16},{"ruleId":"90","severity":1,"message":"91","line":75,"column":5,"nodeType":"92","messageId":"93","endLine":84,"endColumn":6},{"ruleId":"69","severity":1,"message":"94","line":47,"column":24,"nodeType":"71","messageId":"72","endLine":47,"endColumn":37},{"ruleId":"69","severity":1,"message":"95","line":48,"column":28,"nodeType":"71","messageId":"72","endLine":48,"endColumn":45},{"ruleId":"79","severity":1,"message":"80","line":91,"column":20,"nodeType":"81","messageId":"82","endLine":91,"endColumn":22},{"ruleId":"75","severity":1,"message":"96","line":97,"column":8,"nodeType":"77","endLine":97,"endColumn":23,"suggestions":"97"},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'setToken' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["98"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["99"],"no-negated-in-lhs",["100"],"React Hook useEffect has missing dependencies: 'onSave', 'token', and 'userId'. Either include them or remove the dependency array.",["101"],"'res' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'setCheckValue' is assigned a value but never used.","'setAutoDeleteTime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'showToast'. Either include it or remove the dependency array.",["102"],{"desc":"103","fix":"104"},"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [id, token]",{"range":"109","text":"110"},"Update the dependencies array to be: [onSave, token, userId]",{"range":"111","text":"112"},"Update the dependencies array to be: [showToast, token, userId]",{"range":"113","text":"114"},[1646,1648],"[id, token]",[1507,1509],"[onSave, token, userId]",[3391,3406],"[showToast, token, userId]"]