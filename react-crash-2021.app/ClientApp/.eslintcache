[{"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserContext.js":"1","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\index.js":"2","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Constant.js":"3","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\App.js":"4","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\comment-components\\Comments.js":"5","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\AppNavbar.js":"6","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserManager.js":"7","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\task-tracker\\Task.js":"8","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\AlertCenter.js":"9","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\Logout.js":"10","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserFunctions.js":"11","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\RegisterAndLoginRoutes.js":"12","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\TaskDetails.js":"13","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\toast\\Toast.js":"14","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Footer.js":"15","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\categories\\CategoryContainer.js":"16","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\task-tracker\\TaskTracker.js":"17","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\Login.js":"18","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\Helpers.js":"19","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\About.js":"20","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\comment-components\\Comment.js":"21","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\reportWebVitals.js":"22"},{"size":1106,"mtime":1621200205243,"results":"23","hashOfConfig":"24"},{"size":1019,"mtime":1621200205361,"results":"25","hashOfConfig":"24"},{"size":232,"mtime":1614736916073,"results":"26","hashOfConfig":"24"},{"size":8738,"mtime":1626290775702,"results":"27","hashOfConfig":"24"},{"size":371,"mtime":1616002415429,"results":"28","hashOfConfig":"24"},{"size":2634,"mtime":1626290729388,"results":"29","hashOfConfig":"24"},{"size":7451,"mtime":1626290894369,"results":"30","hashOfConfig":"24"},{"size":1826,"mtime":1621302800498,"results":"31","hashOfConfig":"24"},{"size":1558,"mtime":1621200205131,"results":"32","hashOfConfig":"24"},{"size":198,"mtime":1614736916166,"results":"33","hashOfConfig":"24"},{"size":1672,"mtime":1621200205252,"results":"34","hashOfConfig":"24"},{"size":699,"mtime":1616002415575,"results":"35","hashOfConfig":"24"},{"size":4988,"mtime":1621302800443,"results":"36","hashOfConfig":"24"},{"size":2936,"mtime":1616002415445,"results":"37","hashOfConfig":"24"},{"size":942,"mtime":1621200205191,"results":"38","hashOfConfig":"24"},{"size":1906,"mtime":1621302800459,"results":"39","hashOfConfig":"24"},{"size":5471,"mtime":1621302800506,"results":"40","hashOfConfig":"24"},{"size":3082,"mtime":1621200205222,"results":"41","hashOfConfig":"24"},{"size":159,"mtime":1621200205116,"results":"42","hashOfConfig":"24"},{"size":280,"mtime":1614736916063,"results":"43","hashOfConfig":"24"},{"size":378,"mtime":1621200205270,"results":"44","hashOfConfig":"24"},{"size":375,"mtime":1614736916191,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"ea2nox",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"51"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserContext.js",[],["99","100"],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\index.js",[],["101","102"],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Constant.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\App.js",["103","104","105","106","107","108"],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\comment-components\\Comments.js",["109","110"],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\AppNavbar.js",["111"],"ï»¿import { Navbar, Nav } from 'react-bootstrap'\r\nimport { useToken } from './api-authorization/UserContext'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst AppNavbar = ({ onLogoutClick, alerts }) => {\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n    const { token } = useToken()\r\n\r\n    useEffect(() => {\r\n        //console.log('nav bar render')\r\n\r\n        return () => {\r\n            //console.log('nav bar clean up')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //console.log('nav bar token use effect')\r\n\r\n        if (!token?.token) setIsExpanded(false)\r\n    }, [token])\r\n\r\n    const logoutAndCollapse = (e) => {\r\n        setIsExpanded(false)\r\n        onLogoutClick(e)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\" expanded={isExpanded} >\r\n                <Navbar.Brand>Task Tracker</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" onClick={() => setIsExpanded(isExpanded ? false : \"expanded\")} />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={NavLink} onClick={() => setIsExpanded(false)} to=\"/\" exact>Home</Nav.Link>\r\n                        <Nav.Link as={NavLink} onClick={() => setIsExpanded(false)} to=\"/about\" exact>About</Nav.Link>\r\n                        {token?.token ? (\r\n                            <>\r\n                                <Nav.Link as={NavLink} onClick={() => setIsExpanded(false)} to=\"/userManager\" exact>Manage Account</Nav.Link>\r\n                                <Nav.Link as={NavLink} onClick={() => setIsExpanded(false)} to=\"/categories\">Categories</Nav.Link>\r\n                                <Nav.Link as={NavLink} onClick={() => setIsExpanded(false)} to=\"/alerts\" exact>Alerts\r\n                                        {(alerts.length > 0) && (<span id='alertCounter'>{alerts.length}</span>)}\r\n                                </Nav.Link>\r\n                                <Nav.Link as={NavLink} onClick={logoutAndCollapse} to=\"/logout\" exact>Logout</Nav.Link>\r\n                            </>) : (<>\r\n                                <Nav.Link as={NavLink} onClick={() => setIsExpanded(false)} to=\"/login\" exact>Login</Nav.Link>\r\n                                <Nav.Link as={NavLink} onClick={() => setIsExpanded(false)} to=\"/register\" exact>Register</Nav.Link>\r\n                            </>)}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    )\r\n        \r\n    \r\n}\r\n\r\nexport default AppNavbar\r\n","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserManager.js",["112","113","114","115"],"import { useState, useEffect } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Constant from '../Constant'\r\nimport userFunctions from './UserFunctions'\r\nimport { useShowToast } from '../toast/ToastContext'\r\nimport { useToken } from './UserContext'\r\nimport Helpers from '../../Helpers'\r\n\r\n\r\nconst UserManager = ({ handleLogout }) => {\r\n    //console.log(`id: ${id}`)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [user, setUser] = useState()\r\n    const [showDeleteForm, setShowDeleteForm] = useState(false)\r\n    const [deleteDisabled, setDeleteDisabled] = useState(false)\r\n    const [submitDisabled, setSubmitDisabled] = useState(false)\r\n    const { token } = useToken()\r\n\r\n    const onSave = useShowToast()\r\n    //https://stackoverflow.com/questions/53120972/how-to-call-loading-function-with-react-useeffect-only-once\r\n\r\n    useEffect(() => {\r\n\r\n        const getUser = async () => {\r\n            try {\r\n                //\r\n                //(CrudOperations)                               \r\n\r\n                //console.log('getting user')\r\n                //console.log(`user = ${userId}`)\r\n                if (token != undefined) {\r\n                    const userData = await userFunctions.getUser(token?.id, token?.token)\r\n                    setUser(userData)\r\n                    setIsLoading(false)\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n                onSave('error', error)\r\n            }\r\n        }\r\n\r\n        getUser()\r\n        \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        return function cleanup() {\r\n            //console.log('clean up')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //console.log('user use effect')\r\n        //if (isChecked != undefined) {\r\n        //    //const updatedUser = await userFunctions.saveUser({ user, id, token })        \r\n        //}\r\n        //else {\r\n        //    console.log('first time')\r\n        //}\r\n        //console.log('set')\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        console.log('isLoading use effect')\r\n    }, [isLoading])\r\n\r\n    \r\n\r\n\r\n    async function updateUser(appUser) {\r\n        \r\n        return fetch(`${Constant()}/api/users/${token?.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token?.token,\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(appUser),\r\n        })\r\n            .then(function (data) {\r\n               onSave('success', 'Your changes have been saved')\r\n               return data.json()\r\n            })\r\n            .catch((error) => {\r\n               onSave('error', error)\r\n            })\r\n    }\r\n\r\n    const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    const onSubmit = async e => {\r\n        e.preventDefault()\r\n        setSubmitDisabled(true)\r\n        let res = await updateUser(user)  \r\n        await sleep(1000)\r\n        setSubmitDisabled(false)\r\n    }\r\n\r\n    const onSubmitDelete = async e => {\r\n        e.preventDefault()\r\n        setDeleteDisabled(true)\r\n        setShowDeleteForm(true)\r\n        //handleLogout(e)\r\n        //let res = await deleteAccount(id)\r\n    }\r\n\r\n    const onDelete = async e => {\r\n        handleLogout(e)\r\n        let res = await deleteAccount()\r\n    }\r\n\r\n    async function deleteAccount() {\r\n        return fetch(`${Constant()}/api/users/${token?.id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token?.token,\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ userId: token?.id }),\r\n        })\r\n        .then(data => data.json())\r\n        .catch((error) => {\r\n            console.error('Fetch Error:', error);\r\n        });\r\n    }  \r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <p>Loading...</p>\r\n            ):\r\n                (<div>\r\n                    {showDeleteForm && (\r\n                        <div className='popup'>\r\n                            <div className='popupForm'>\r\n                                <form>\r\n                                    <label for=\"\">Are you sure?</label>\r\n                                    <br />\r\n                                    <button\r\n                                        className='btn'\r\n                                        style={{ backgroundColor: 'green' }}\r\n                                        onClick={onDelete}\r\n                                    >\r\n                                        Yes\r\n                                    </button>\r\n                                    <button\r\n                                        type='submit'\r\n                                        className='btn'\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={function () {\r\n                                            setDeleteDisabled(false)\r\n                                            setShowDeleteForm(false)\r\n                                        }}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n\r\n                                </form>\r\n                            </div>                          \r\n                        </div>\r\n                    )}\r\n                    <Form onSubmit={onSubmit}>\r\n                        <Form.Group>\r\n                            <Form.Check\r\n                                type=\"checkbox\"\r\n                                label=\"Open To Collaboration?: \"\r\n                                checked={user.isOpenToCollaboration}\r\n                                onChange={(e) => setUser({ ...user, isOpenToCollaboration: e.currentTarget.checked })} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>\r\n                                Bio: \r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows={3}\r\n                                placeholder=''\r\n                                value={Helpers.replaceNullWithEmptyString(user?.bio)}\r\n                                onChange={(e) => setUser({ ...user, bio: e.target.value })}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <button\r\n                            type='submit'\r\n                            className='btn btn-block'\r\n                            style={{ backgroundColor: 'green' }}\r\n                            disabled={submitDisabled}\r\n                        >\r\n                            Save Changes\r\n                        </button>\r\n                    </Form>\r\n\r\n                    <form onSubmit={onSubmitDelete}>\r\n                        <button\r\n                            type='submit'\r\n                            className='btn'\r\n                            style={{ backgroundColor: 'red' }}\r\n                            disabled={deleteDisabled}\r\n                        >\r\n                            Delete Account\r\n                        </button>\r\n                    </form >                 \r\n                    \r\n                </div>)}\r\n            \r\n        </>\r\n   )\r\n}\r\n\r\nexport default UserManager","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\task-tracker\\Task.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\AlertCenter.js",[],["116","117"],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\Logout.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\UserFunctions.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\RegisterAndLoginRoutes.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\TaskDetails.js",["118","119"],"import { useParams } from 'react-router-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from './Button'\r\nimport EditTask from './EditTask'\r\nimport FormatDateString from './FormatDateString'\r\nimport FetchTask from './task-crud-operations/FetchTask'\r\nimport CommentSection from './comment-components/CommentSection'\r\nimport { useShowToast } from './toast/ToastContext'\r\nimport { useToken } from './api-authorization/UserContext'\r\nimport UpdateTask from './task-crud-operations/UpdateTask'\r\nimport Downloader from './Downloader'\r\n\r\nconst TaskDetails = () => {\r\n\r\n    //gets the params passed in from the router\r\n    //is a react hook\r\n    const { id } = useParams()\r\n    const { token } = useToken()\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [task, setTask] = useState(null)\r\n    const [showEditTask, setShowEditTask] = useState(false)\r\n    const [comments, setComments] = useState()\r\n    const showToast = useShowToast() \r\n    const history = useHistory();\r\n   \r\n    const coolColor = (i) => {\r\n        i = i > 3 ? i % 4 : i \r\n        switch(i) {\r\n          case 0:\r\n            return 'pink';\r\n          case 1:\r\n            return 'white';\r\n          case 2:\r\n            return 'orange';\r\n          case 3:\r\n              return 'green';\r\n          default:\r\n            return '';\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        //console.log(\"using effect: task details\")\r\n        // Fetch Task\r\n        //const fetchTask = FetchTask\r\n\r\n\r\n\r\n        const getTask = async () => {          \r\n            try {       \r\n                const taskFromServer = await FetchTask(id, token?.token)         \r\n                setTask(taskFromServer)\r\n                setComments(taskFromServer.comments)\r\n                //console.log(taskFromServer)\r\n                //setComments(taskFromServer.comments)\r\n                setIsLoading(false)\r\n            } catch (error) {\r\n                console.log(\"failed\") \r\n                console.log(error);\r\n            }   \r\n        }\r\n      \r\n        getTask()\r\n\r\n    }, []) \r\n\r\n    const onCancel = () => {\r\n        setShowEditTask(!showEditTask)\r\n    }\r\n\r\n\r\n\r\n    const update = async (task) => {\r\n        setIsLoading(true)\r\n        try {\r\n            task.userId = token?.id\r\n            setShowEditTask(!showEditTask)\r\n            const updTask = await UpdateTask(task, token?.token)\r\n            setTask(updTask)\r\n            setIsLoading(false)\r\n            showToast('success', `Updated \"${task.text}\"`)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!isLoading ? (\r\n                <div>    \r\n                    {!showEditTask && (\r\n                        <div className=\"taskDetail\">\r\n                            <h3>\r\n                                {task.text}\r\n                            </h3>\r\n                            <hr></hr>\r\n                            <p> \r\n                                Category: <span style={{color: task.color}}>{task.categoryName}</span>\r\n                            </p>\r\n                            <p>\r\n                                Location: {task.location}\r\n                            </p>\r\n                            {task?.day &&\r\n                                (<p>\r\n                                    Day: {FormatDateString(task.day)}\r\n                                </p>)\r\n                            }\r\n                            \r\n                            <p>\r\n                                Details: {task.details !== undefined ? task.details : \"None\"}\r\n                            </p>    \r\n                            { task.isCompleted && (\r\n                                <p>Completed On: {FormatDateString(task.dateCompleted)}</p>\r\n                            )}\r\n                            <Button\r\n                                color='green'\r\n                                text='â Back'\r\n                                onClick={history.goBack}\r\n                            />\r\n                            <Button                                \r\n                                text='Edit Task'\r\n                                onClick={() => setShowEditTask(!showEditTask)}\r\n                            />\r\n\r\n                            <Downloader task={task} token={token} />\r\n                            <CommentSection comments={comments} setComments={setComments} taskId={id} /> \r\n                                                    \r\n                        </div>\r\n                    )}                               \r\n\r\n                    {showEditTask && (\r\n                        <EditTask task={task} onUpdate={update} onCancel={onCancel} />\r\n                    )}        \r\n                </div>) : (\r\n                <div>\r\n                    <h1>Loading ...</h1>\r\n                </div>\r\n            )}           \r\n        </>        \r\n    )\r\n}\r\n\r\nexport default TaskDetails","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\toast\\Toast.js",["120"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useToast } from './ToastContext'\r\n\r\nimport './Toast.css';\r\n//source:     transition: max-height 0.5s, opacity 0.5s;\r\nconst Toast = ({ position, autoDelete, dismissTime }) => {\r\n    const toastList = useToast()\r\n    const [list, setList] = useState(toastList)\r\n\r\n    //function sleep(ms) {\r\n    //    console.log('sleeping')\r\n    //    return new Promise(resolve => setTimeout(resolve, ms));\r\n    //  }\r\n\r\n    useEffect(() => {\r\n        //console.log('toastlist side effect')\r\n        //console.log(toastList)\r\n        setList([...toastList]);\r\n\r\n        // eslint-disable-next-line\r\n    }, [toastList]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(async () => {\r\n            if (autoDelete && toastList.length && list.length) {            \r\n                deleteToast(toastList[0].id);\r\n            }\r\n        }, dismissTime);\r\n\r\n        return async () => {                     \r\n            clearInterval(interval);\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [toastList, autoDelete, dismissTime, list]);\r\n\r\n    const deleteToast = id => {\r\n        const listItemIndex = list.findIndex(e => e.id === id);\r\n        const toastListItem = toastList.findIndex(e => e.id === id);\r\n        list.splice(listItemIndex, 1);\r\n        toastList.splice(toastListItem, 1);\r\n        setList([...list]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`notification-container ${position}`}>\r\n                {\r\n                    list.map((toast, i) =>\r\n                        <div\r\n                            key={i}\r\n                            className={`notification toast ${('hidden' in toast) ? ('hidden') : ('show')} ${position}`}\r\n                            style={{ backgroundColor: toast.backgroundColor }}\r\n                        >\r\n                            <button onClick={() => deleteToast(toast.id)}>\r\n                                X\r\n                            </button>\r\n                            <div className=\"notification-image\">\r\n                                <img src={toast.icon} alt=\"\" />\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"notification-title\">{toast.title}</p>\r\n                                <p className=\"notification-message\">\r\n                                    {toast.description}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    Toast.defaultProps = {\r\n        position: 'bottom-right'\r\n    }\r\n\r\n    Toast.propTypes = {\r\n        toastList: PropTypes.array.isRequired,\r\n        position: PropTypes.string,\r\n        autoDelete: PropTypes.bool,\r\n        autoDeleteTime: PropTypes.number\r\n    }\r\n}\r\n\r\nexport default Toast\r\n\r\n","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\Footer.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\categories\\CategoryContainer.js",["121","122","123"],"\r\nimport { useState, useEffect } from 'react'\r\nimport AddCategory from './AddCategory'\r\nimport CategoryTable from './CategoryTable'\r\nimport { useToken } from '../api-authorization/UserContext'\r\nimport CategoryCrudOperations from './CategoryCrudOperations'\r\n\r\nconst CategoryContainer = () => {\r\n    const [categories, setCategories] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [showAddCat, setShowAddCat] = useState(true)\r\n    const { token } = useToken()\r\n\r\n    useEffect(() => {\r\n        console.log('use effect in cat container')\r\n        \r\n        setIsLoading(false)\r\n        const getCategories = async () => {\r\n            try {\r\n                //console.log(CrudOperations)                               \r\n                //console.log(`token = ${token}`)\r\n                //console.log(`user = ${userId}`)\r\n                if (token !== undefined) {\r\n                    const catsFromServer = await CategoryCrudOperations.getCategoriesByUser(token?.id, token?.token)\r\n                    console.log(catsFromServer)\r\n                    setIsLoading(false)\r\n                    setCategories(catsFromServer)\r\n                }\r\n                \r\n            } catch (error) {\r\n                //showToast('error', error)\r\n            }\r\n        }\r\n\r\n        getCategories()\r\n\r\n        return function cleanup() {\r\n            setCategories([])\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? \r\n                (<>\r\n                    <h1>Loading...</h1>\r\n                </>) : \r\n                (<>\r\n                    <AddCategory categories={categories} token={token} setCategories={setCategories} />\r\n                    <CategoryTable categories={categories} token={token} setCategories={setCategories} />\r\n                </>) \r\n            } \r\n        </>                   \r\n    )\r\n}\r\n\r\nexport default CategoryContainer","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\task-tracker\\TaskTracker.js",["124","125","126"],"import Constant from '../Constant'\r\nimport CrudOperations from '../task-crud-operations/CrudOperations'\r\nimport Header from '../task-tracker/Header'\r\nimport AddTask from '../task-tracker/AddTask'\r\nimport Tasks from '../task-tracker/Tasks'\r\nimport { useState, useEffect } from 'react'\r\nimport { useShowToast } from '../toast/ToastContext'\r\nimport { useToken} from '../api-authorization/UserContext'\r\nimport Calendar from './Calendar'\r\nimport Button from '../Button'\r\nimport CategoryCrudOperations from '../categories/CategoryCrudOperations'\r\n\r\nconst TaskTracker = () => {\r\n        //showAddTask = current state\r\n    //setShowAddTask = function that aloows you to update the current state\r\n    //when you update state, the component rerenders\r\n    const { token } = useToken()\r\n    const [showAddTask, setShowAddTask] = useState(false)\r\n    const [tasks, setTasks] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const showToast = useShowToast()\r\n    const [showCalendarView, setShowCalendarView] = useState(false)\r\n    const [categories, setCategories] = useState([])\r\n   \r\n    useEffect(() => {\r\n        //console.log('task tracker use effect')\r\n        const getCategories = async () => {\r\n            try {\r\n                //console.log(CrudOperations)                               \r\n                //console.log(`token = ${token}`)\r\n                //console.log(`user = ${userId}`)\r\n                if (token !== undefined) {\r\n                    let catsFromServer = (await CategoryCrudOperations.getCategoriesByUser(token?.id, token?.token))  \r\n                    catsFromServer.unshift({name: 'Choose...', id:''})             \r\n                    console.log(catsFromServer)\r\n                    setCategories(catsFromServer)\r\n                }\r\n                \r\n            } catch (error) {\r\n                //showToast('error', error)\r\n            }\r\n        }\r\n  \r\n        getCategories()\r\n\r\n        const getTasks = async () => {\r\n            try {\r\n                //console.log(CrudOperations)                               \r\n                //console.log(`token = ${token}`)\r\n                //console.log(`user = ${userId}`)\r\n                if (token != undefined) {\r\n                    const tasksFromServer = await CrudOperations.FetchTasks(token?.id, token?.token)\r\n                    setIsLoading(false)\r\n                    setTasks(tasksFromServer)\r\n                }\r\n                \r\n            } catch (error) {\r\n                showToast('error', error)\r\n            }\r\n        }\r\n\r\n        getTasks()\r\n\r\n        return function cleanup() {\r\n            setTasks([])\r\n        }\r\n    }, [])\r\n\r\n    const onDelete = async (id) => {\r\n        await CrudOperations.DeleteTask(id, token?.token)\r\n        //.filter removes the task with the same id as the id passed up\r\n        setTasks(tasks.filter((task) => task.id !== id))\r\n    }\r\n\r\n    // Toggle Reminder\r\n    //takes id so it knows which on to toggle\r\n    const toggleReminder = async (taskToToggle) => {\r\n        try {\r\n            //const taskToToggle = await CrudOperations.FetchTask(id, token)\r\n            const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\r\n            //console.log(updTask)\r\n            const res = await fetch(`${Constant()}/api/tasks/${taskToToggle.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    'Authorization': 'Bearer ' + token?.token\r\n                },\r\n                body: JSON.stringify(updTask)\r\n            })\r\n\r\n            const data = await res.json()\r\n\r\n            setTasks(\r\n                tasks.map((task) =>\r\n                    task.id === taskToToggle.id ? { ...task, reminder: data.reminder } : task\r\n                )\r\n            )\r\n        } catch (error) {\r\n            showToast('error', 'error')\r\n        }\r\n\r\n    }\r\n\r\n    const updateTask = async (task) => {\r\n        //console.log(task)\r\n        setTasks(\r\n            tasks.map((oldTask) => task.id === oldTask.id ? task : oldTask)\r\n        )\r\n    }\r\n\r\n    function calendarBtnClick(e) {\r\n        e.currentTarget.blur()\r\n        setShowCalendarView(!showCalendarView)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                onAdd={() => setShowAddTask(!showAddTask)}\r\n                showAdd={showAddTask} />\r\n            <AddTask isToggled={showAddTask}\r\n                tasks={tasks} setTasks={setTasks}\r\n                setShowAddTask={setShowAddTask}\r\n                categories={categories} />\r\n            <div id='divBtnContainer'>\r\n                <Button text={showCalendarView ? ('Show List View') : ('Show Calendar View')}\r\n                    textColor='white'\r\n                    onClick={calendarBtnClick}\r\n                />\r\n            </div>\r\n            {!isLoading ? (\r\n                (tasks.length > 0) ? (\r\n                    (showCalendarView) ?\r\n                        (<Calendar tasks={tasks} setTasks={setTasks} />) :\r\n                        (<Tasks\r\n                            tasks={tasks}\r\n                            categories={categories}\r\n                            onDelete={onDelete}\r\n                            onToggle={toggleReminder}\r\n                            onGoToDetail={() => { setShowAddTask(false) }} />)\r\n                    ) :\r\n                    ('No Tasks To Show')\r\n            ) : ('Loading ...')}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskTracker","C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\api-authorization\\Login.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\Helpers.js",["127"],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\About.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\components\\comment-components\\Comment.js",[],"C:\\Users\\lritter\\Source\\Repos\\react-crash-2021\\react-crash-2021.app\\ClientApp\\src\\reportWebVitals.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"132"},{"ruleId":"130","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":51,"column":24,"nodeType":"136","messageId":"137","endLine":51,"endColumn":37},{"ruleId":"134","severity":1,"message":"138","line":52,"column":28,"nodeType":"136","messageId":"137","endLine":52,"endColumn":45},{"ruleId":"134","severity":1,"message":"139","line":59,"column":11,"nodeType":"136","messageId":"137","endLine":59,"endColumn":26},{"ruleId":"140","severity":1,"message":"141","line":126,"column":19,"nodeType":"142","messageId":"143","endLine":126,"endColumn":21},{"ruleId":"140","severity":1,"message":"141","line":159,"column":23,"nodeType":"142","messageId":"143","endLine":159,"endColumn":25},{"ruleId":"144","severity":1,"message":"145","line":165,"column":8,"nodeType":"146","endLine":165,"endColumn":15,"suggestions":"147"},{"ruleId":"134","severity":1,"message":"148","line":1,"column":8,"nodeType":"136","messageId":"137","endLine":1,"endColumn":13},{"ruleId":"134","severity":1,"message":"149","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":18},{"ruleId":"150","severity":1,"message":"151","line":1,"column":1,"nodeType":"152","messageId":"143","fix":"153"},{"ruleId":"140","severity":1,"message":"141","line":31,"column":27,"nodeType":"142","messageId":"143","endLine":31,"endColumn":29},{"ruleId":"144","severity":1,"message":"154","line":45,"column":8,"nodeType":"146","endLine":45,"endColumn":10,"suggestions":"155"},{"ruleId":"134","severity":1,"message":"156","line":97,"column":13,"nodeType":"136","messageId":"137","endLine":97,"endColumn":16},{"ruleId":"134","severity":1,"message":"156","line":112,"column":13,"nodeType":"136","messageId":"137","endLine":112,"endColumn":16},{"ruleId":"128","replacedBy":"157"},{"ruleId":"130","replacedBy":"158"},{"ruleId":"134","severity":1,"message":"159","line":27,"column":11,"nodeType":"136","messageId":"137","endLine":27,"endColumn":20},{"ruleId":"144","severity":1,"message":"160","line":66,"column":8,"nodeType":"146","endLine":66,"endColumn":10,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":75,"column":5,"nodeType":"164","messageId":"165","endLine":84,"endColumn":6},{"ruleId":"134","severity":1,"message":"166","line":11,"column":12,"nodeType":"136","messageId":"137","endLine":11,"endColumn":22},{"ruleId":"134","severity":1,"message":"167","line":11,"column":24,"nodeType":"136","messageId":"137","endLine":11,"endColumn":37},{"ruleId":"144","severity":1,"message":"168","line":41,"column":8,"nodeType":"146","endLine":41,"endColumn":10,"suggestions":"169"},{"ruleId":"140","severity":1,"message":"141","line":51,"column":27,"nodeType":"142","messageId":"143","endLine":51,"endColumn":29},{"ruleId":"144","severity":1,"message":"170","line":67,"column":8,"nodeType":"146","endLine":67,"endColumn":10,"suggestions":"171"},{"ruleId":"134","severity":1,"message":"172","line":104,"column":11,"nodeType":"136","messageId":"137","endLine":104,"endColumn":21},{"ruleId":"150","severity":1,"message":"151","line":1,"column":1,"nodeType":"152","messageId":"143","fix":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],["174"],["175"],"no-unused-vars","'setCheckValue' is assigned a value but never used.","Identifier","unusedVar","'setAutoDeleteTime' is assigned a value but never used.","'getConnectionId' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connection', 'setAlertsOnLogin', and 'showToast'. Either include them or remove the dependency array.","ArrayExpression",["176"],"'Table' is defined but never used.","'useState' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"177","text":"178"},"React Hook useEffect has missing dependencies: 'onSave' and 'token'. Either include them or remove the dependency array.",["179"],"'res' is assigned a value but never used.",["174"],["175"],"'coolColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'token?.token'. Either include them or remove the dependency array.",["180"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'showAddCat' is assigned a value but never used.","'setShowAddCat' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'showToast' and 'token'. Either include them or remove the dependency array.",["182"],"'updateTask' is assigned a value but never used.",{"range":"183","text":"178"},"no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},[-1,0],"",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},[-1,0],"Update the dependencies array to be: [connection, setAlertsOnLogin, showToast, token]",{"range":"194","text":"195"},"Update the dependencies array to be: [onSave, token]",{"range":"196","text":"197"},"Update the dependencies array to be: [id, token?.token]",{"range":"198","text":"199"},"Update the dependencies array to be: [token]",{"range":"200","text":"201"},"Update the dependencies array to be: [showToast, token]",{"range":"202","text":"203"},[5849,5856],"[connection, setAlertsOnLogin, showToast, token]",[1531,1533],"[onSave, token]",[2103,2105],"[id, token?.token]",[1411,1413],"[token]",[2649,2651],"[showToast, token]"]